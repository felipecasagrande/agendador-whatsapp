import os
import json
import logging
from dotenv import load_dotenv
from flask import Flask, request, abort
from twilio.twiml.messaging_response import MessagingResponse
from twilio.request_validator import RequestValidator
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Fun√ß√µes principais do agendador
from agendar_por_prompt import interpretar_prompt, criar_evento

# ======================================================
# üîß CONFIGURA√á√ÉO INICIAL
# ======================================================
load_dotenv()
logging.basicConfig(level=logging.INFO)
app = Flask(__name__)

# ======================================================
# üîê TWILIO CONFIG
# ======================================================
ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID", "")
AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN", "")
TWILIO_WHATS_NUMBER = os.getenv("TWILIO_WHATS_NUMBER", "whatsapp:+14155238886")
ALLOW_LIST = set(filter(None, [n.strip() for n in os.getenv("ALLOW_LIST", "").split(",")]))
validator = RequestValidator(AUTH_TOKEN) if AUTH_TOKEN else None


# ======================================================
# üßæ VALIDA√á√ÉO DE SEGURAN√áA
# ======================================================
def _validate_twilio_signature():
    """Valida a assinatura da Twilio"""
    if not validator:
        app.logger.warning("Validator desabilitado (AUTH_TOKEN ausente).")
        return
    sig = request.headers.get("X-Twilio-Signature", "")
    url = request.url
    params = request.form.to_dict()
    if not validator.validate(url, params, sig):
        app.logger.warning("Assinatura Twilio inv√°lida.")
        abort(403)


# ======================================================
# üìÖ FORMATA√á√ÉO LEG√çVEL DE DATA (sem locale)
# ======================================================
def formatar_data_legivel(data_str):
    """Formata data para: '20 de outubro de 2025 (segunda-feira)', ou 'hoje'/'amanh√£'"""
    hoje = datetime.now().date()
    data = datetime.strptime(data_str, "%Y-%m-%d").date()
    diff = (data - hoje).days

    if diff == 0:
        return "hoje"
    elif diff == 1:
        return "amanh√£"

    meses = [
        "janeiro", "fevereiro", "mar√ßo", "abril", "maio", "junho",
        "julho", "agosto", "setembro", "outubro", "novembro", "dezembro"
    ]
    dias_semana = [
        "segunda-feira", "ter√ßa-feira", "quarta-feira",
        "quinta-feira", "sexta-feira", "s√°bado", "domingo"
    ]

    nome_mes = meses[data.month - 1]
    nome_dia = dias_semana[data.weekday()]

    return f"{data.day} de {nome_mes} de {data.year} ({nome_dia})"


# ======================================================
# üí¨ ENDPOINT PRINCIPAL - WHATSAPP
# ======================================================
@app.post("/whats")
def whats():
    """Recebe mensagens, interpreta com IA e agenda no Google Calendar"""
    _validate_twilio_signature()

    body = (request.form.get("Body") or "").strip()
    from_number = (request.form.get("From") or "").replace("whatsapp:", "")
    msg_sid = request.form.get("MessageSid")

    # ‚öôÔ∏è Evita duplica√ß√£o
    cache_key = os.path.join("/tmp", f"msg_{msg_sid}") if msg_sid else None
    if cache_key and os.path.exists(cache_key):
        resp = MessagingResponse()
        resp.message("‚ö†Ô∏è Mensagem j√° processada.")
        return str(resp)
    if cache_key:
        open(cache_key, "w").close()

    app.logger.info("Msg de %s: %s", from_number, body)

    # ‚öôÔ∏è Autoriza√ß√£o opcional
    if ALLOW_LIST and from_number not in ALLOW_LIST:
        resp = MessagingResponse()
        resp.message("‚ùå N√∫mero n√£o autorizado para usar o agendador.")
        return str(resp)

    resp = MessagingResponse()

    # üìö Comando de ajuda
    if body.lower() in {"help", "ajuda", "menu"}:
        resp.message(
            "üìÖ *Agendador WhatsApp*\n\n"
            "Envie mensagens como:\n"
            "‚Ä¢ reuni√£o com Jo√£o amanh√£ √†s 14h\n"
            "‚Ä¢ jantar com Maria hoje √†s 20h\n"
            "‚Ä¢ call com equipe dia 24 √†s 16h30\n"
            "‚Ä¢ comprar p√£o amanh√£ (evento de dia inteiro)\n"
            "‚Ä¢ comprar suco hoje #laranja\n\n"
            "O evento ser√° criado automaticamente no Google Calendar ‚úÖ"
        )
        return str(resp)

    # ==================================================
    # üß© PROCESSAMENTO PRINCIPAL
    # ==================================================
    try:
        parsed = interpretar_prompt(body)
        data = parsed.get("data")
        hora = parsed.get("hora")

        if not data:
            app.logger.error("‚ùå IA n√£o retornou data v√°lida.")
            raise ValueError("Interpreta√ß√£o falhou: data ausente.")

        ev = criar_evento(
            titulo=parsed.get("titulo"),
            data_inicio=data,
            hora_inicio=hora,
            duracao_min=parsed.get("duracao_min", 60),
            participantes=parsed.get("participantes", []),
            descricao=parsed.get("descricao", ""),
            colorId=parsed.get("colorId", "9")
        )

        evento_url = ev.get("htmlLink", "")
        hora_txt = hora if hora else "(dia inteiro)"
        data_legivel = formatar_data_legivel(data)

        cor_nomes = {
            "9": "Azul (Pav√£o)",
            "6": "Laranja",
            "3": "Roxo",
            "10": "Verde",
            "5": "Amarelo",
            "4": "Rosa",
            "8": "Cinza",
            "11": "Vermelho"
        }
        cor_nome = cor_nomes.get(parsed.get("colorId", "9"), "Azul (Pav√£o)")

        resp.message(
            f"‚úÖ *Evento criado com sucesso!*\n"
            f"‚Ä¢ {parsed.get('titulo')}\n"
            f"‚Ä¢ {data_legivel} {hora_txt}\n"
            f"üîó {evento_url if evento_url else '(sem link)'}\n"
            f"üé® *Cor:* {cor_nome}"
        )

        app.logger.info(f"üéâ Evento criado: {parsed.get('titulo')} em {data_legivel} {hora_txt}")

    except Exception as e:
        app.logger.exception("Erro ao processar mensagem: %s", e)
        resp.message("‚ùå N√£o consegui agendar. Tente: 'reuni√£o com Jo√£o amanh√£ √†s 10h30'.")

    return str(resp)


# ======================================================
# ü©∫ HEALTHCHECK
# ======================================================
@app.get("/")
def root():
    return ("", 204)  # Sem texto, status 204 = No Content


# ======================================================
# üìß NOTIFICA√á√ÉO DE DEPLOY (SERVIDOR LIVE)
# ======================================================
def notify_live():
    """Envia e-mail autom√°tico quando o servidor est√° 'live'."""
    try:
        sender = os.getenv("SMTP_USER", "felipecasagrandematos@gmail.com")
        password = os.getenv("SMTP_PASS", "")
        recipient = "felipecasagrandematos@gmail.com"

        subject = "‚úÖ Servidor Agendador WhatsApp est√° online!"
        body = (
            "Ol√° Felipe,\n\n"
            "O servidor foi iniciado com sucesso e est√° ativo em:\n"
            "üîó https://agendador-whatsapp.onrender.com\n\n"
            "Data/hora do deploy: "
            + datetime.now().strftime("%d/%m/%Y %H:%M:%S")
            + "\n\nAtenciosamente,\nAgendador Autom√°tico ü§ñ"
        )

        msg = MIMEMultipart()
        msg["From"] = sender
        msg["To"] = recipient
        msg["Subject"] = subject
        msg.attach(MIMEText(body, "plain"))

        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()
            server.login(sender, password)
            server.send_message(msg)

        print("üì® E-mail enviado: servidor live notificado!")

    except Exception as e:
        print(f"‚ö†Ô∏è Falha ao enviar notifica√ß√£o: {e}")


# ======================================================
# üöÄ EXECU√á√ÉO LOCAL (debug)
# ======================================================
if __name__ == "__main__":
    port = int(os.getenv("PORT", 10000))
    notify_live()  # Envia e-mail de notifica√ß√£o
    app.run(host="0.0.0.0", port=port, debug=True)
